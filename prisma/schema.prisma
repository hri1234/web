datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    ADMIN
    DELIVERY
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(USER)
    profile       Profile?
    order         Order[]
    favorite      Favorite?
}

model Profile {
    id    String  @id @default(cuid())
    phone String?
    img   String?
    name  String?
    email String  @unique
    user  User    @relation(fields: [email], references: [email])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Menu {
    id           String   @id @default(cuid())
    title        String
    shortDescr   String
    longDescr    String?
    price        Float
    sellingPrice Float?
    image        String
    prepType     String[]
    onPromo      Boolean  @default(false)
    category     String
}

model Category {
    id    String @id @default(cuid())
    title String @unique
    desc  String
    img   String
}

enum OrderStatus {
    PREPARING
    UNASSIGNED
    COLLECTED
    DELIVERED
}

model Order {
    id              String      @id @default(cuid())
    orderNumber     String      @unique
    cart            Json[]
    orderDate       DateTime    @default(now())
    deliveryTime    DateTime?   @default(now())
    userName        String
    userEmail       String // To be used to filter orders that belong to the customer
    user            User        @relation(fields: [userEmail], references: [email])
    userPhone       String
    paymentToken    String? // For payment verifications
    paid            Boolean     @default(false)
    delivery        Delivery?
    deliveryAddress String
    deliveryFee     Float       @default(4)
    serviceFee      Float       @default(3)
    status          OrderStatus @default(PREPARING)
    note            String?
    discount        Float?
    total           Float
}

model Delivery {
    id          String @id @default(cuid())
    driverName  String
    driverEmail String
    driverPhone String
    order       Order  @relation(fields: [orderNum], references: [orderNumber])
    orderNum    String @unique // To be used to filter orders that belong to the customer
}

model Favorite {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userEmail], references: [email])
    userEmail String   @unique // To be used to filter favorites that belong to the customer
    menu      String[]
}

model Restaurant {
    id          String  @id @default(cuid())
    name        String
    address     String? @default("27 DrickField, Darwin, Australia")
    openTimes   Json[]
    deliveryFee Float   @default(4)
    serviceFee  Float   @default(3)
    bannerImg   String
    rating      Float   @default(4.5)
}

enum notifyStatus {
    READ
    UNREAD
}

model Notification {
    id        String       @id @default(cuid())
    createdAt DateTime     @default(now())
    updatedAt DateTime     @default(now())
    type      String
    message   String
    status    notifyStatus @default(UNREAD)
}
